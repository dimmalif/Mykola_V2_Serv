import os
import re
from time import ctime, time
from Bot_Mykola.SQLite.base import *
from aiogram import types, Dispatcher, executor, Bot
from aiogram.dispatcher.storage import FSMContext
from Bot_Mykola.handlers.create_bot import dp, bot
from Vectorizer.vector import vectoring
from .kb_init import *
from Skills.movies import Movies
from aiogram.dispatcher import filters
from Bot_Mykola.handlers.client import take_audio
from Skills.Functions import *
from aiogram import types, Dispatcher, executor, Bot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup


class Storage_bot(StatesGroup):
    music_name = State()
    file = State()
    rep = State()


@dp.message_handler(commands='start')
async def greeting(message: types.Message):
    await message.answer_animation('https://i.gifer.com/G74b.gif')
    await create_profile(message.from_user.id, message.from_user.full_name, message.from_user.username)
    await message.reply(
        f'–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}, —è –≥–æ–ª–æ—Å–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ <b>–ú–∏–∫–æ–ª–∞</b>, –±—É–¥—É —Ä–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏üòÅ\n'
        '–î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å.\n'
        '–ó—Ä–æ–±–∏—Ç–∏ —Ü–µ –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏—â–µ. –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.',
        reply_markup=null_keyboard, parse_mode="HTML")
    print(f'/start or /help : {ctime(time())}')


@dp.message_handler(text='–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—èüë®üèº‚Äç')
async def reg(message: types.Message):
    await message.answer(
        '*–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å!* –î–æ–¥–∞–π—Ç–µ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∞—à–µ –º—ñ—Å—Ü–µ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —ñ –∑–º–æ–∂–µ—Ç–µ —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ '
        '–ø–æ–≥–æ–¥–æ—é.\n'
        '–î–ª—è —Ü—å–æ–≥–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤ —á–∞—Ç: "–Ø –ø—Ä–æ–∂–∏–≤–∞—é –≤  <_–í–∞—à–µ –º—ñ—Å—Ç–æ –≤ –Ω–∞–∑–∏–≤–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É_>"',
        reply_markup=default_key_board_client, parse_mode="Markdown")


@dp.message_handler(filters.Text(contains='–Ø –ø—Ä–æ–∂–∏–≤–∞—é', ignore_case=True))
async def reg_city(message: types.Message):
    res = re.findall(r'[—è–Ø] –ø—Ä–æ–∂–∏–≤–∞—é [—É–≤] (.+)', message.text)
    print(res)
    add_city(message.from_user.id, res[0])
    await message.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏ –º—ñ—Å—Ü–µ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è!üó∫')


@dp.message_handler(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏')
async def skip_reg(message: types.Message):
    await message.answer('–í–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –¥–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –±—É—Ç–∏ *–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ*. –ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—èüòä',
                         reply_markup=default_key_board_client, parse_mode="Markdown")


@dp.message_handler(text='–§—É–Ω–∫—Ü—ñ—óü§ñ')
async def get_all_func_keyboard(message: types.Message):
    await message.answer('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥‚¨áÔ∏è', reply_markup=all_func_key_board_client)
    await message.delete()


@dp.message_handler(text='–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫üí≠', state=None)
async def get_all_func_keyboard(message: types.Message):
    await message.answer('–ó–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –Ω–∏–∂—á–µ‚¨áÔ∏è')
    await Storage_bot.rep.set()
    await message.delete()


@dp.message_handler(state=Storage_bot.rep)
async def download_music(message: types.Message, state: FSMContext):
    get_report(message.from_user.id, message.text)
    await message.answer('–ö–æ–º–∞–Ω–¥–∞ —Ä–æ–∑—Ä–æ–±–∫–∏ –¥—è–∫—É—î –∑–∞ –≤—ñ–¥–≥—É–∫üòâ')
    await state.finish()


@dp.message_handler(text='–î–æ–ø–æ–º–æ–≥–∞üÜò')
async def back_to_start(message: types.Message):
    await message.answer(help_message(), parse_mode="HTML")
    await message.delete()


@dp.message_handler(text='üî£')
async def back_to_start(message: types.Message):
    await message.answer('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=default_key_board_client)
    await message.delete()


@dp.message_handler(text='–ú—É–ª—å—Ç–∏–º–µ–¥—ñ—èüìº')
async def get_multimedia_func(message: types.Message):
    await message.answer('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥‚¨áÔ∏è', reply_markup=multimedia_func)
    await message.delete()


@dp.message_handler(text='‚óÄÔ∏è')
async def go_back(message: types.Message):
    await message.answer('–ù–∞–∑–∞–¥', reply_markup=all_func_key_board_client)
    await message.delete()


@dp.message_handler(text='–†–æ–∑–≤–∞–≥–∏üé≠')
async def jocks(message: types.Message):
    await message.reply('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥‚¨áÔ∏è', reply_markup=jock_func)
    await message.delete()


@dp.message_handler(text='–¶—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç‚ÅâÔ∏è')
async def i_facts(message: types.Message):
    await message.reply(i_fact(), reply_markup=jock_func)
    await message.delete()


@dp.message_handler(text='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è —Ñ—ñ–ª—å–º—Éüé¨')
async def film(message: types.Message):
    movie = Movies('–∫–æ–ª—è –ø–µ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π —Ñ—ñ–ª—å–º').get_film()
    await message.reply(f'*–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏:* {movie[0]}\n'
                        f'*–ü–æ—Å–∏–ª–∞–Ω–Ω—è:* {movie[1]}', parse_mode="Markdown")
    await message.delete()


@dp.message_handler(text='–ü–æ–≥–æ–¥–∞üå§')
async def get_weather(message: types.Message):
    print('weather')
    await message.reply(show_weather(user_id=message.from_user.id), parse_mode="Markdown")
    await message.delete()


@dp.message_handler(text='–ö—É—Ä—Å –≤–∞–ª—é—Çüí∏')
async def get_weather(message: types.Message):
    print('exchange_rates')
    await message.answer(exchange_rates(), parse_mode="Markdown")
    await message.delete()


@dp.message_handler(text='–Ø–∫–µ —Å—å–æ–≥–æ–¥–Ω—ñ —Å–≤—è—Ç–æ?ü•≥')
async def get_weather(message: types.Message):
    with open(f"{give_holydays()}", 'r', encoding='utf-8') as f:
        text = f.read()
    await message.answer(text)
    await message.delete()


@dp.message_handler(text='–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∫–∞–∑–∞–Ω–æ—ó –ø—ñ—Å–Ω—ñüì≤', state=None)
async def question_download_music(message: types.Message):
    await message.answer('–í–∫–∞–∂—ñ—Ç—å –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É –±–∞–∂–∞–Ω–æ—ó –ø—ñ—Å–Ω—ñ. –©–æ–± –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø–∏—à—ñ—Ç—å *"–í—ñ–¥–º—ñ–Ω–∞"*',
                         parse_mode="Markdown")
    await Storage_bot.music_name.set()
    await message.delete()


@dp.message_handler(state=Storage_bot.music_name)
async def download_music(message: types.Message, state: FSMContext):
    print('start_download')
    if message.text.title() == '–í—ñ–¥–º—ñ–Ω–∞':
        await message.answer('–í—ñ–¥–º—ñ–Ω–µ–Ω–æ')
        await state.finish()
        return 0

    await state.update_data(music_name=message.text)
    data = await state.get_data()
    result = download_one_music(text=f"–ö–æ–ª—è —Å–∫–∞—á–∞–π –ø—ñ—Å–Ω—é {data['music_name']}")
    await message.reply_document(open(f'{result}', 'rb'))
    await state.finish()
    # os.remove(result)
    print('removed')


@dp.message_handler(text='–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤—ñ–¥–µ–æ (mp4) –≤ –∑–≤—É–∫ (mp3) üõ†', state=None)
async def mp4_to_mp3(message: types.Message):
    await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏')
    await Storage_bot.file.set()
    await message.delete()


@dp.message_handler(content_types=["video"], state=Storage_bot.file)
async def download_music(message: types.Message, state: FSMContext):
    print('–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...')
    file_id = message.video.file_id  # Get file id
    file = await bot.get_file(file_id)  # Get file path
    await bot.download_file(file.file_path, f"{message.from_user.id}.mp4")
    res = converted_music(f"{message.from_user.id}")
    await message.reply_document(open(f'{res}.mp3', 'rb'))
    await state.finish()
    os.remove(f"{res}.mp4")
    os.remove(f"{res}.mp3")
    print('removed')
    await state.finish()


@dp.message_handler(state=Storage_bot.file)
async def check_type_file(message: types.Message, state: FSMContext):
    if message.content_type != 'video':
        await message.reply('–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–µ –≤—ñ–¥–µ–æ')
        await state.finish()
